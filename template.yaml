AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "AWS Marketplace Serverless SaaS Integration Application"
Globals:
  Function:
    Timeout: 15
  Api:
    Cors:
      AllowMethods: "'POST,OPTIONS'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
      AllowCredentials: "'*'"

Parameters:

  WebsiteS3BucketName:
    Type: String
    #AllowedPattern: "(?!(^xn--|.+-s3alias$))^[a-z0-9][a-z0-9-]{1,61}[a-z0-9]$"
    ConstraintDescription: "S3 bucket name must follow S3 recommendations https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html"
    Default: ""

  NewSubscribersTableName:
    Type: String
    AllowedPattern: ".*"
    Default: "AWSMarketplaceSubscribers"

  AWSMarketplaceMeteringRecordsTableName:
    Type: String
    AllowedPattern: ".*"
    Default: "AWSMarketplaceMeteringRecords"

  TypeOfSaaSListing:
    Type: String
    Default: contracts_with_subscription
    AllowedValues:
      - contracts_with_subscription
      - contracts
      - subscriptions

  SNSAccountID:
    Type: String
    Default: "287250355862"
    Description: "This is the AWS account hosting the SNS Entitlement and Subscription topics for your product."
    AllowedValues:
      - "287250355862"

  SNSRegion:
      Type: String
      Default: "us-east-1"
      Description: "This is the AWS region of the SNS Entitlement and Subscription topics for your product."
      AllowedValues: 
        - us-east-1

  ProductId:
    Type: String
    AllowedPattern: ".*"

  MarketplaceTechAdminEmail:
    Type: String
    AllowedPattern: ".*"

  MarketplaceSellerEmail:
    Type: String
    AllowedPattern: ".*"
    Default: ""

  CreateCrossAccountRole:
    Default: "false"
    Description: "Do you intend to use cross account access with this integration core?"
    Type: String
    AllowedValues:
      - "true"
      - "false"
  
  CrossAccountId:
    Default: ''
    Description: "Enter the cross AWS account id"
    Type: String

  CrossAccountRoleName: 
    Type: String
    Description: "Your Role Name (ex: OrganizationAccountAccessRole); This will need to be the same across all of the Member Accounts"

  CreateRegistrationWebPage:
    Default: "true"
    Type: String
    AllowedValues:
      - "true"
      - "false"

  UpdateFulfillmentURL:
    Default: "false"
    Type: String
    Description: "WARNING: This will update your product's fulfillment URL automatically. Be careful if your product is already public"
    AllowedValues:
      - "true"
      - "false"

Conditions:
  CreateEntitlementLogic:
    Fn::Or:
      - !Equals [!Ref TypeOfSaaSListing, contracts_with_subscription]
      - !Equals [!Ref TypeOfSaaSListing, contracts]

  CreateSubscriptionLogic:
    Fn::Or:
      - !Equals [!Ref TypeOfSaaSListing, contracts_with_subscription]
      - !Equals [!Ref TypeOfSaaSListing, subscriptions]

  CreateWeb: !Equals [!Ref CreateRegistrationWebPage, true]
  Buyernotificationemail: !Not [!Equals [!Ref MarketplaceSellerEmail, ""]]
  CreateCrossAccount: !Equals [!Ref CreateCrossAccountRole, true]
  UpdateFulfillment: !Equals [!Ref UpdateFulfillmentURL, true]

Resources:

  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      MethodSettings:
        - ResourcePath: /subscriber
          HttpMethod: POST, OPTIONS
        - ResourcePath: /redirectmarketplacetoken
          HttpMethod: POST, OPTIONS

  CrossAccountRoleForSaaSIntegration:
    Type: AWS::IAM::Role
    Condition: CreateCrossAccount
    DependsOn: 
     - AWSMarketplaceMeteringRecords 
     - AWSMarketplaceSubscribers
    Properties:
      RoleName:
         !Join
          - '-'
          - - 'CrossAccountRoleName'
            - !Select 
              - 0
              - !Split 
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref AWS::StackId
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Join [":", ["arn:aws:iam:", !Ref CrossAccountId , "root"]]
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref CrossAccountRoleName
      Path: /
      Policies:
        - PolicyName:
           !Join
            - '-'
            - - 'CrossAccountPolicy'
              - !Select 
                - 0
                - !Split 
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref AWS::StackId
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:UpdateItem'
                Resource:
                  - !GetAtt AWSMarketplaceMeteringRecords.Arn
                  - !GetAtt AWSMarketplaceSubscribers.Arn
                  
  AWSMarketplaceMeteringRecords:
    Type: AWS::DynamoDB::Table
    Condition: CreateSubscriptionLogic
    Properties:
      AttributeDefinitions:
        - AttributeName: "customerIdentifier"
          AttributeType: "S"
        - AttributeName: "create_timestamp"
          AttributeType: "N"
        - AttributeName: "metering_pending"
          AttributeType: "S"

      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: "customerIdentifier"
          KeyType: "HASH"
        - AttributeName: "create_timestamp"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: PendingMeteringRecordsIndex
          KeySchema:
            - AttributeName: "metering_pending"
              KeyType: "HASH"
          Projection:
            ProjectionType: ALL
      TableName: !Ref AWSMarketplaceMeteringRecordsTableName

  AWSMarketplaceSubscribers:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "customerIdentifier"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: "customerIdentifier"
          KeyType: "HASH"
      TableName: !Ref NewSubscribersTableName
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  
  RegisterNewMarketplaceCustomer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: register-new-subscriber.registerNewSubscriber
      Runtime: nodejs22.x
      Environment:
        Variables:
          NewSubscribersTableName: !Ref NewSubscribersTableName
          EntitlementQueueUrl:
            !If [CreateEntitlementLogic, !Ref EntitlementSQSQueue, !Ref AWS::NoValue]
          MarketplaceSellerEmail:
            !If [Buyernotificationemail, !Ref MarketplaceSellerEmail, !Ref AWS::NoValue]
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref NewSubscribersTableName
        - Statement:
            - Sid: AWSMarketplaceResolveCustomer
              Effect: Allow
              Action:
                - aws-marketplace:ResolveCustomer
              Resource: "*"
        - !If
          - CreateEntitlementLogic
          - Statement:
              - Sid: SQSPolicy
                Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt EntitlementSQSQueue.Arn
          - !Ref "AWS::NoValue"

        - Statement:
            - Sid: Sendemail
              Effect: Allow
              Action:
                - ses:SendEmail
              Resource: "*"
      Events:
        RegisterCustomer:
          Type: Api
          Properties:
            Path: /subscriber
            Method: post
            RestApiId: !Ref ServerlessApi

  EntitlementSQSQueue:
    Type: AWS::SQS::Queue
    Condition: CreateEntitlementLogic

  EntitlementSQSHandler:
    Type: AWS::Serverless::Function
    Condition: CreateEntitlementLogic
    Properties:
      CodeUri: src
      Handler: entitlement-sqs.handler
      Runtime: nodejs22.x
      Environment:
        Variables:
          NewSubscribersTableName: !Ref NewSubscribersTableName
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref NewSubscribersTableName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt EntitlementSQSQueue.Arn
        - Statement:
            - Sid: AWSMarketplaceEntitlements
              Effect: Allow
              Action:
                - aws-marketplace:GetEntitlements
              Resource: "*"
      Events:
        MySQSEvent:
          Type: SNS
          Properties:
            Topic:  !Sub 'arn:aws:sns:${SNSRegion}:${SNSAccountID}:aws-mp-entitlement-notification-${GetProductCode.ProductCode}'
            Region: !Sub '${SNSRegion}'
            SqsSubscription:
              BatchSize: 1
              QueueArn: !GetAtt EntitlementSQSQueue.Arn
              QueueUrl: !Ref EntitlementSQSQueue

  SubscriptionSQSHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src
      Handler: subscription-sqs.SQSHandler
      Runtime: nodejs22.x
      Environment:
        Variables:
          NewSubscribersTableName: !Ref NewSubscribersTableName
          SupportSNSArn: !Ref SupportSNSTopic
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref NewSubscribersTableName
        - Statement:
            - Sid: SNSPublish
              Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref SupportSNSTopic
      Events:
        MySQSEvent:
          Type: SNS
          Properties:
            #Topic: !Ref SubscriptionSNSTopic
            Topic:  !Sub 'arn:aws:sns:${SNSRegion}:${SNSAccountID}:aws-mp-subscription-notification-${GetProductCode.ProductCode}'
            Region: !Sub '${SNSRegion}'
            SqsSubscription: true

  SupportSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref MarketplaceTechAdminEmail
          Protocol: email

  GrantOrRevokeAccess:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src
      Handler: grant-revoke-access-to-product.dynamodbStreamHandler
      Runtime: nodejs22.x
      Environment:
        Variables:
          SupportSNSArn: !Ref SupportSNSTopic
          LOG_LEVEL: "info"
      Policies:
        - AWSLambdaDynamoDBExecutionRole
        - Statement:
            - Sid: SNSPublish
              Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref SupportSNSTopic
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt AWSMarketplaceSubscribers.StreamArn
            BatchSize: 1
            StartingPosition: TRIM_HORIZON

  Hourly:
    Type: AWS::Serverless::Function
    Condition: CreateSubscriptionLogic
    Properties:
      CodeUri: src
      Handler: metering-hourly-job.job
      Runtime: nodejs22.x
      Environment:
        Variables:
          SQSMeteringRecordsUrl: !Ref SQSMeteringRecords
          AWSMarketplaceMeteringRecordsTableName: !Ref AWSMarketplaceMeteringRecordsTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AWSMarketplaceMeteringRecordsTableName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SQSMeteringRecords.QueueName
      Events:
        CWSchedule:
          Type: Schedule
          Properties:
            Schedule: "rate(1 hour)"
            Name:
             !Join
              - '-'
              - - 'MeteringSchedule'
                - !Select 
                  - 0
                  - !Split 
                    - "-"
                    - !Select
                      - 2
                      - !Split
                        - "/"
                        - !Ref AWS::StackId
            Description: SaaS Metering
            Enabled: true

  SQSMeteringRecords:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
       !Join
        - '-'
        - - !Select 
            - 0
            - !Split 
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref AWS::StackId
          - 'SQSMeteringRecords.fifo'
      ContentBasedDeduplication: true
      FifoQueue: true
      MessageRetentionPeriod: 3000
    Condition: CreateSubscriptionLogic

  MeteringSQSHandler:
    Type: AWS::Serverless::Function
    Condition: CreateSubscriptionLogic
    Properties:
      CodeUri: src
      Handler: metering-sqs.handler
      Runtime: nodejs22.x
      Environment:
        Variables:
          ProductCode: !GetAtt GetProductCode.ProductCode
          AWSMarketplaceMeteringRecordsTableName: !Ref AWSMarketplaceMeteringRecordsTableName
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref AWSMarketplaceMeteringRecordsTableName
        - Statement:
            - Sid: AWSMarketplaceMetering
              Effect: Allow
              Action:
                - aws-marketplace:BatchMeterUsage
              Resource: "*"
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSMeteringRecords.Arn
            BatchSize: 1

  
          Bucket: !GetAtt WebsiteS3BucketLog.DomainName
          IncludeCookies: false
          Prefix: "access-logs"

  WebsiteS3Bucket:
    Type: AWS::S3::Bucket
    Condition: CreateWeb
    Properties:
      BucketName: !Ref WebsiteS3BucketName

  WebsiteS3BucketLog:
    Type: AWS::S3::Bucket
    Condition: CreateWeb
    Properties:
      BucketName: !Join ["-", [!Ref WebsiteS3BucketName, "log"]]
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      IntelligentTieringConfigurations:
        - Id: !Join ["-", [!Ref WebsiteS3BucketName, "log"]]
          Status: Enabled
          Tierings:
            - AccessTier: ARCHIVE_ACCESS
              Days: 90

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: CreateWeb
    Properties:
      Bucket: !Ref WebsiteS3Bucket
      PolicyDocument:
        # Restricting access to cloudfront only.
        Statement:
          - Effect: Allow
            Sid: "AllowCloudFrontServicePrincipal"
            Action: "s3:GetObject"
            Resource:
              - !Sub "arn:aws:s3:::${WebsiteS3Bucket}/*"
            Principal:
              Service: "cloudfront.amazonaws.com"
            Condition:
              StringEquals: 
                "AWS:SourceArn" : 
                  - !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudfrontDistribution}"
                

  LambdaRedirectPostRequests:
    Type: AWS::Serverless::Function
    Condition: CreateWeb
    Properties:
      Runtime: nodejs22.x
      CodeUri: src/
      Handler: redirect.redirecthandler
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Environment:
        Variables:
          RedirectUrl: https://aws-ia.github.io/cloudformation-aws-marketplace-saas/#_post_deployment_steps
      Events:
        RedirectMarketplaceToken:
          Type: Api
          Properties:
            Path: /redirectmarketplacetoken
            Method: post  
            RestApiId: !Ref ServerlessApi

  CloudFrontOriginAccessControl:
    Type: "AWS::CloudFront::OriginAccessControl"
    Properties: 
      OriginAccessControlConfig: 
        Description:
         !Join
          - '-'
          - - 'Origin Access Control for static website'
            - !Select 
              - 0
              - !Split 
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref AWS::StackId
        Name:
         !Join
          - '-'
          - - 'OAC'
            - !Select 
              - 0
              - !Split 
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref AWS::StackId
        OriginAccessControlOriginType: "s3"
        SigningBehavior: "always"
        SigningProtocol: "sigv4"


  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Condition: CreateWeb
    DependsOn: ServerlessApi
    Properties:
      DistributionConfig:
        Comment:
         !Join
          - '-'
          - - 'Cloudfront distribution for serverless website'
            - !Select 
              - 0
              - !Split 
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref AWS::StackId
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-website
            DomainName: !GetAtt WebsiteS3Bucket.RegionalDomainName
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
            S3OriginConfig:
              OriginAccessIdentity: ""
          - Id: api-gateway
            DomainName: !Sub "${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
              OriginSSLProtocols:
                - "TLSv1.2"
              HTTPSPort: 443
            OriginPath: "/Prod"
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: true
          AllowedMethods:
            - HEAD
            - DELETE
            - POST
            - GET
            - OPTIONS
            - PUT
            - PATCH
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          - PathPattern: /redirectmarketplacetoken
            AllowedMethods:
            - HEAD
            - DELETE
            - POST
            - GET
            - OPTIONS
            - PUT
            - PATCH
            TargetOriginId: api-gateway
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 60669652-455b-4ae9-85a4-c4c02393f86c
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
          - PathPattern: /subscriber
            AllowedMethods:
            - HEAD
            - DELETE
            - POST
            - GET
            - OPTIONS
            - PUT
            - PATCH
            TargetOriginId: api-gateway
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 60669652-455b-4ae9-85a4-c4c02393f86c
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
        Logging:
          Bucket: !GetAtt WebsiteS3BucketLog.DomainName
          IncludeCookies: false
          Prefix: "access-logs"
  
  S3ContentHome:
    Type: Custom::Lambda
    Condition: CreateWeb
    Properties:
      ServiceToken: !GetAtt S3ContentCustomResource.Arn
      BucketName: !Ref WebsiteS3Bucket
      Key: index.html
      ContentType: "text/html"
      Body: |
        <!doctype html>
        <html lang="en">
        <head>
          <!-- Required meta tags -->
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
          <!-- Bootstrap CSS -->
          <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
            integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
          <link rel="stylesheet" href="style.css">
          <title>Registration page</title>
        </head>
        <body class="text-center">
          <div class="container">
            <div id="alert"></div>
            <form class="form-signin" method="POST" enctype="multipart/form-data">
              <img class="mb-4" src="logo.png" alt="" width="72" height="72">
              <h1 class="h3 mb-3 font-weight-normal">Please enter your contact details</h1>
              <label for="companyName" class="sr-only">Company name</label>
              <input type="text" name="companyName" class="form-control" placeholder="Company name" required autofocus>
              <label for="contactPerson" class="sr-only">Contact person</label>
              <input type="text" name="contactPerson" class="form-control" placeholder="Contact person" required autofocus>
              <label for="Contact phone" class="sr-only">Contact phone</label>
              <input type="tel" name="contactPhone" class="form-control" placeholder="Contact phone" required autofocus>
              <label for="contactEmail" class="sr-only">Email address</label>
              <input type="email" name="contactEmail" class="form-control" placeholder="Email address" required autofocus>
              <button class="btn btn-lg btn-primary btn-block" type="submit">Register</button>
              <p class="mt-5 mb-3 text-muted">&copy; 2024</p>
            </form>
          </div>
          <!-- Optional JavaScript -->
          <!-- jQuery first, then Popper.js, then Bootstrap JS -->
          <script src="https://code.jquery.com/jquery-3.7.0.min.js"
            integrity="sha384-NXgwF8Kv9SSAr+jemKKcbvQsz+teULH/a5UNJvZc6kP47hZgl62M1vGnw6gHQhb1"
            crossorigin="anonymous"></script>
          <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
            integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
            crossorigin="anonymous"></script>
          <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
            integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
            crossorigin="anonymous"></script>
          <script src="/script.js"></script>
        </body>
        </html>

  S3ContentScript:
    Type: Custom::Lambda
    Condition: CreateWeb
    Properties:
      ServiceToken: !GetAtt S3ContentCustomResource.Arn
      BucketName: !Ref WebsiteS3Bucket
      Key: script.js
      ContentType: "text/javascript"
      Body: |
        const form = document.getElementsByClassName('form-signin')[0];
        const showAlert = (cssClass, message) => {
          const html = `
            <div class="alert alert-${cssClass} alert-dismissible" role="alert">
                <strong>${message}</strong>
                <button class="close" type="button" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>`;
          document.querySelector('#alert').innerHTML += html;
        };
        const formToJSON = (elements) => [].reduce.call(elements, (data, element) => {
          data[element.name] = element.value;
          return data;
        }, {});
        const getUrlParameter = (name) => {
          name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
          const regex = new RegExp(`[\\?&]${name}=([^&#]*)`);
          const results = regex.exec(location.search);
          return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
        };
        const handleFormSubmit = (event) => {
          event.preventDefault();
          const postUrl = `/subscriber`;
          const regToken = getUrlParameter('x-amzn-marketplace-token');
          if (!regToken) {
            showAlert('danger',
              'Registration Token Missing. Please go to AWS Marketplace and follow the instructions to set up your account!');
          } else {
            const data = formToJSON(form.elements);
            data.regToken = regToken;
            const xhr = new XMLHttpRequest();
            xhr.open('POST', postUrl, true);
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.send(JSON.stringify(data));
            xhr.onreadystatechange = () => {
              if (xhr.readyState == XMLHttpRequest.DONE) {
                showAlert('primary', xhr.responseText);
                console.log(JSON.stringify(xhr.responseText));
              }
            };
          }
        };
        form.addEventListener('submit', handleFormSubmit);
        const regToken = getUrlParameter('x-amzn-marketplace-token');
        if (!regToken) {
          showAlert('danger', 'Registration Token Missing. Please go to AWS Marketplace and follow the instructions to set up your account!');
        }

  S3ContentStyle:
    Type: Custom::Lambda
    Condition: CreateWeb
    Properties:
      ServiceToken: !GetAtt S3ContentCustomResource.Arn
      BucketName: !Ref WebsiteS3Bucket
      Key: style.css
      ContentType: "text/css"
      Body: |
        html,
        body {
          height: 100%;
        }
        body {
          display: -ms-flexbox;
          display: flex;
          -ms-flex-align: center;
          align-items: center;
          padding-top: 40px;
          padding-bottom: 40px;
          background-color: #f5f5f5;
        }
        .form-signin {
          width: 100%;
          max-width: 330px;
          padding: 15px;
          margin: auto;
        }
        .form-signin .checkbox {
          font-weight: 400;
        }
        .form-signin .form-control {
          position: relative;
          box-sizing: border-box;
          height: auto;
          padding: 10px;
          font-size: 16px;
          margin-top:5px;
        }
        .form-signin .form-control:focus {
          z-index: 2;
        }
        .form-signin input[type="email"] {
          margin-bottom: -1px;
          border-bottom-right-radius: 0;
          border-bottom-left-radius: 0;
        }
        .form-signin input[type="password"] {
          margin-bottom: 10px;
          border-top-left-radius: 0;
          border-top-right-radius: 0;
        }
        .bd-placeholder-img {
          font-size: 1.125rem;
          text-anchor: middle;
          -webkit-user-select: none;
          -moz-user-select: none;
          -ms-user-select: none;
          user-select: none;
        }
        @media (min-width: 768px) {
          .bd-placeholder-img-lg {
            font-size: 3.5rem;
          }
        }
  
  S3ContentLogo:
    Type: Custom::Lambda
    Condition: CreateWeb
    Properties:
      ServiceToken: !GetAtt S3ContentCustomResource.Arn
      BucketName: !Ref WebsiteS3Bucket
      Key: logo.png
      ContentType: "image/png"
      IsBase64Encoded: true
      Body: 
  
  S3ContentFavicon:
    Type: Custom::Lambda
    Condition: CreateWeb
    Properties:
      ServiceToken: !GetAtt S3ContentCustomResource.Arn
      BucketName: !Ref WebsiteS3Bucket
      Key: favicon.ico
      ContentType: "image/x-icon"
      IsBase64Encoded: true
      Body: AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArmYf/51RE/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACuZh//rmYf/65mH/+dURP/nVET/51RE/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACuZh//rmYf/65mH/+uZh//nVET/51RE/+dURP/nVET/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArmYf/65mH/+uZh//rmYf/51RE/+dURP/nVET/51RE/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK5mH/+uZh//rmYf/65nH/+eUhP/nVET/51RE/+dURP/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACuZh//rmYf/7p9F/+6fRf/un0X/7p9F/+dUhP/nVET/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALp9F/+6fRf/un0X/7p9F/+6fRf/un0X/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIXvu/yRf4/oAAAAAAAAAALp9F/+6fRf/AAAAAAAAAADJowD1uI0D/wAAAAAAAAAAAAAAABVQmwghe+7/IXvu/yF77v8kX+P/JF/j/yRf4/8AAAAAAAAAAMmjAP/JowD/yaMA/7iNA/+4jQP/uI0D/3hcAgghe+7/IXvu/yF77v8he+7/JF/j/yRf4/8kX+P/G0eqnJd6AJzJowD/yaMA/8mjAP+4jQP/uI0D/7iNA/+4jQP/IXvu/yF77v8he+7/IXvu/yRf4/8kX+P/JF/j/xtHqpyXegCcyaMA/8mjAP/JowD/uI0D/7iNA/+4jQP/uI0D/yF77v8he+7/IXvu/yWE8f8kX+P/JF/j/yRf4/8bR6qcl3oAnMmjAP/JowD/yaMA/8SeE/+4jQP/uI0D/7iNA/8he+7/LJX3/yyW9/8slvf/LJb3/yyW9/8kX+P/G0eqnJd6AJzJowD/2sE0/9rBNP/awTT/2sE0/9i+Mf+4jQP/AAAAACyW9/8slvf/LJb3/yyW9/8slvf/LJb3/wAAAAAAAAAA2sE0/9rBNP/awTT/2sE0/9rBNP/awTT/AAAAAAAAAAAAAAAAAAAAACyW9/8slvf5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2sE0/trBNP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/n8AAPgfAADwDwAA8A8AAPAPAADwDwAA+B8AAOZnAACBgQAAAAAAAAAAAAAAAAAAAAAAAIGBAADn5wAA//8AAA==

  # Custom Lambda function that creates an object in specified S3 bucket and prefix
  S3ContentCustomResource:
    Type: AWS::Lambda::Function
    Condition: CreateWeb
    DependsOn: S3ContentCustomResourceLogGroup
    Properties:
      Code: 
        ZipFile: |
          const { S3Client, PutObjectCommand, DeleteObjectCommand } = require("@aws-sdk/client-s3");
          const s3Client = new S3Client();
          exports.handler = async function(event, context) {
            console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));
            let responseStatus = "FAILED";
            let responseData = {};
            let physicalResourceId = event.ResourceProperties.Key;
            // For Delete requests, delete object.
            if (event.RequestType == "Delete") {
              console.log(`Deleting s3://${event.ResourceProperties.BucketName}/${event.ResourceProperties.Key}`);
              try {
                const deleteObjectCommand = new DeleteObjectCommand({
                  Bucket: event.ResourceProperties.BucketName,
                  Key: event.ResourceProperties.Key
                });
                await s3Client.send(deleteObjectCommand);
                responseStatus = "SUCCESS";
                console.log("Deleted");
              } catch (e) {
                console.error(`Failed to delete object: ${e.message}`);
              }
            } else {
              const body = typeof event.ResourceProperties.IsBase64Encoded == "string" && event.ResourceProperties.IsBase64Encoded.toLowerCase() == "true" ? Buffer.from(event.ResourceProperties.Body, 'base64') : event.ResourceProperties.Body;
              console.log(`Saving s3://${event.ResourceProperties.BucketName}/${event.ResourceProperties.Key}`);
              try {
                const putObjectCommand = new PutObjectCommand({
                  Body: body,
                  Bucket: event.ResourceProperties.BucketName,
                  Key: event.ResourceProperties.Key,
                  ContentType: event.ResourceProperties.ContentType
                });
                await s3Client.send(putObjectCommand);
                console.log("Saved");
                responseData["BucketName"] = event.ResourceProperties.BucketName;
                responseData["Key"] = event.ResourceProperties.Key;
                responseData["ContentType"] = event.ResourceProperties.ContentType;
                responseStatus = "SUCCESS";
              } catch (e) {
                console.log(`Could not save to S3: ${e.message}`);
              }
            }
            return await sendResponse(event, context, responseStatus, responseData, physicalResourceId);
          };
          // Send response to the pre-signed S3 URL 
          const sendResponse = async function(event, context, responseStatus, responseData, physicalResourceId) {
            let responseBody = JSON.stringify({
                Status: responseStatus,
                Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                PhysicalResourceId: physicalResourceId,
                StackId: event.StackId,
                RequestId: event.RequestId,
                LogicalResourceId: event.LogicalResourceId,
                Data: responseData
            });
            console.log("RESPONSE BODY:\n", responseBody);
            await sendRequest(event.ResponseURL, {
              method: "PUT",
              body: responseBody
            })
          };
          // Web request
          const sendRequest = async function(url, opt) {
            opt = opt ? opt : {};
            const parsedUrl = require("url").parse(url);
            let headers = opt.headers ? opt.headers : {};
            headers["Content-length"] = opt.body ? opt.body.length : 0;
            const options = {
              hostname: parsedUrl.hostname,
              port: opt.port ? opt.port : (parsedUrl.protocol == "https:" ? 443 : 80),
              path: parsedUrl.path,
              method: opt.method ? opt.method : "GET",
              headers: headers
            };
            let response = await new Promise(function(res, err) {
              let request = require(parsedUrl.protocol == "https:" ? "https" : "http").request(options, function(response) {
                let responseText = [];
                response.on("data", function(d) {
                  responseText.push(d);
                });
                response.on("end", function() {
                  response.responseText = responseText.join("");
                  res(response);
                });
              });
              request.on("error", function(error) {
                console.error("sendRequest Error: " + error);
                err(error);
              });
              request.write(opt.body ? opt.body : "");
              request.end();
            });
            return response;
          };
      FunctionName: !Sub
        - "S3ContentCustomResource-${id}"
        - id: !Select 
            - 0
            - !Split 
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref AWS::StackId
      Handler: index.handler
      Role: !GetAtt S3ContentCustomResourceRole.Arn
      Runtime: nodejs20.x
  # Role for custom Lambda function to log activity and put/delete objects in S3 bucket created in this template
  S3ContentCustomResourceRole:
    Type: AWS::IAM::Role
    Condition: CreateWeb
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaExecute
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub
                      - "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/S3ContentCustomResource-${id}*"
                      - id: !Select 
                        - 0
                        - !Split 
                          - "-"
                          - !Select
                            - 2
                            - !Split
                              - "/"
                              - !Ref AWS::StackId
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource: !Sub "${WebsiteS3Bucket.Arn}/*"
  # Log group for Lambda function
  S3ContentCustomResourceLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: CreateWeb
    Properties:
      LogGroupName: !Sub
        - "/aws/lambda/S3ContentCustomResource-${id}"
        - id: !Select 
            - 0
            - !Split 
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref AWS::StackId
      RetentionInDays: 7
  
  GetProductCode:
    Type: Custom::Lambda
    Properties:
      ServiceToken: !GetAtt GetProductCodeCustomResource.Arn
      ProductId: !Ref ProductId
      
  GetProductCodeCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt CAPILambdasExecutionRole.Arn
      Runtime: nodejs22.x
      Handler: index.handler
      Code: 
        ZipFile: |
          const { MarketplaceCatalogClient, DescribeEntityCommand } = require("@aws-sdk/client-marketplace-catalog");
          const response = require('cfn-response');
          exports.handler = async (event, context) => {
          context.callbackWaitsForEmptyEventLoop = true;
            console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));
            const client = new MarketplaceCatalogClient({ region: 'us-east-1' });
            const productId = event.ResourceProperties.ProductId; // Assuming the product ID is passed as an event parameter

            try {
                if (event.RequestType === 'Create' || event.RequestType === 'Update') {
                    // Fetch the product details from AWS Marketplace
                    const command = new DescribeEntityCommand({
                        Catalog: 'AWSMarketplace',
                        EntityId: productId,
                        EntityType: 'Product'
                    });
                    const resp = await client.send(command);

                    // Extract the product code from the response
                    const productCode = resp.DetailsDocument.Description.ProductCode;

                    const responseData = {
                        ProductCode: productCode
                    };

                    await response.send(event, context, 'SUCCESS', responseData);
                } else if (event.RequestType === 'Delete') {
                    // No action needed for delete
                    await response.send(event, context, 'SUCCESS', {});
                } else {
                    await response.send(event, context, 'FAILED', { error: 'Invalid request type' });
                }
            } catch (error) {
                console.error('Error:', error);
                await response.send(event, context, 'FAILED', { error: 'Failed to fetch product code' });
            }
          };

  CAPILambdasExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: manage-products
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "aws-marketplace:StartChangeSet"
                  - "aws-marketplace:DescribeEntity"
                Resource:
                  - !Sub "arn:${AWS::Partition}:aws-marketplace:us-east-1:${AWS::AccountId}:AWSMarketplace/SaaSProduct/${ProductId}"
                  - !Sub "arn:${AWS::Partition}:aws-marketplace:us-east-1:${AWS::AccountId}:AWSMarketplace/ChangeSet/*"

  FulfillmentURL:
    Type: Custom::Lambda
    Condition: UpdateFulfillment
    Properties:
      ServiceToken: !GetAtt UpdateFulfillmentURLCustomResource.Arn
      ProductId: !Ref ProductId
      FulfillmentUrl: !If [
                        CreateWeb,
                        !Sub "https://${CloudfrontDistribution.DomainName}/redirectmarketplacetoken",
                        !Sub "https://${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/redirectmarketplacetoken"
                      ]

  UpdateFulfillmentURLCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt CAPILambdasExecutionRole.Arn
      Runtime: nodejs22.x
      Handler: index.handler
      Code: 
        ZipFile: |
          const { MarketplaceCatalogClient, DescribeEntityCommand, StartChangeSetCommand } = require("@aws-sdk/client-marketplace-catalog");
          const response = require('cfn-response');
          exports.handler = async (event, context) => {
            console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));
            const client = new MarketplaceCatalogClient({ region: 'us-east-1' });
            const productId = event.ResourceProperties.ProductId;
            const fulfillmentUrl = event.ResourceProperties.FulfillmentUrl;
            try {
              if (event.RequestType === 'Create' || event.RequestType === 'Update') {
                    // Fetch the fulfillment url id to be able to update the fulfillment url
                    let command = new DescribeEntityCommand({
                        Catalog: 'AWSMarketplace',
                        EntityId: productId,
                        EntityType: 'Product'
                    });
                    let resp = await client.send(command);
                    console.debug("DescribeEntityCommand:\n" + JSON.stringify(resp));
                    
                    
                    const fulfillmentUrlID = resp.DetailsDocument.Versions[0].DeliveryOptions[0].Id
                    console.debug("FullfilmentId:\n" + fulfillmentUrlID);
                    
                    const details = { 
                      DeliveryOptions : [{
                        Id: fulfillmentUrlID,
                        Details: {
                          SaaSUrlDeliveryOptionDetails: {
                            FulfillmentUrl: fulfillmentUrl
                          }
                        }
                      }]
                    };
                    console.debug("details:\n" + JSON.stringify(details));
                    
                    const startChangeSetInput = { 
                      Catalog: 'AWSMarketplace',
                      ChangeSet: [ 
                        { 
                          ChangeType: 'UpdateDeliveryOptions',
                          Entity: {
                            Identifier: productId,
                            Type: 'SaaSProduct@1.0'
                          },
                          Details: JSON.stringify(details)
                        }
                      ]
                    };
                    console.debug("startChangeSetInput:\n" + JSON.stringify(startChangeSetInput));
                    
                    command = new StartChangeSetCommand(startChangeSetInput);
                    resp = await client.send(command);
                    console.debug("StartChangeSetResp: \n" + JSON.stringify(resp));

                    const responseData = {
                        StartChangeSetResp: JSON.stringify(resp)
                    };

                    await response.send(event, context, 'SUCCESS', responseData);
                } else if (event.RequestType === 'Delete') {
                    // No action needed for delete
                    await response.send(event, context, 'SUCCESS', {});
                } else {
                    await response.send(event, context, 'FAILED', { error: 'Invalid request type' });
                }
            } catch (error) {
                console.error('Error:', error);
                await response.send(event, context, 'FAILED', { error: 'Failed to update fulfillment url' });
            }
          };
          
Outputs:

  CrossAccountRole:
    Description: This is the cross account role ARN.
    Value: 
      !If [
        CreateCrossAccount,
        !GetAtt CrossAccountRoleForSaaSIntegration.Arn,
        "N/A"
      ]

  WebsiteS3Bucket:
    Description: S3 bucket for hosting the static site. You can retrieve the files at https://github.com/aws-samples/aws-marketplace-serverless-saas-integration/tree/master/web.
    Value: 
      !If [
        CreateWeb,
        !Sub "https://s3.console.aws.amazon.com/s3/buckets/${WebsiteS3Bucket}/",
        !Sub "N/A"
      ]

  LandingPagePreviewURL:
    Description: URL to preview your landing page. This is NOT the Fulfillment URL for your product.
    Value:
      !If [
        CreateWeb,
        !Sub "https://${CloudfrontDistribution.DomainName}/index.html",
        "N/A"
      ]

  MarketplaceFulfillmentURL:
    Description: This is the Marketplace fulfillment URL.
    Value:
      !If [
        CreateWeb,
        !Sub "https://${CloudfrontDistribution.DomainName}/redirectmarketplacetoken",
        !Sub "https://${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/redirectmarketplacetoken"
      ]
